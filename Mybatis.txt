1.Mybatis传递参数的3种方式:
	<1>使用map集合,缺点:代码可读性差.
	<2>@param注解,最优方案(当参数小于5个)
	<3>Javabean.直接写类全限定名(当参数大于5个)

2.Mybatis基础:

	<1>Mybatis下面的依赖包:cglib.jar是动态代理包

	<2>Mybatis的日志级别:
		日志记录器（Logger）的行为是分等级的。
		具体分为：OFF、 FATAL、ERROR、WARN、INFO、DEBUG、TRACE、ALL
		
		Log4j建议只使用四个级别，
		优先级从高到低分别是 ERROR、WARN、INFO、DEBUG。
		
		程序会打印高于或等于所 设置级别的日志，设置的日志等级越高，
		打印出来的日志就越少。
		如果设置级别为INFO，则优先级高于等于INFO级别
		（如：INFO、 WARN、ERROR）的日志信息将可以被输出,
		小于该级别的如DEBUG将不会被输出。
	#######开发环境为debug,生产环境为info/error#########

3.实体类的映射(mapper.xml)文件:
	
	(1)<select id="findUserById" parameterType="int" resultType="cn.itcast.mybatis.po.User">
		SELECT * FROM USER WHERE id=#{value}
		</select>

		id：标识 映射文件中的 sql,将sql语句封装到mappedStatement对象中，
			所以将id称为statement的id
	
		parameterType：指定输入 参数的类型，这里指定int型 
	
		#{}表示一个占位符号
		#{id}：其中的id表示接收输入 的参数，参数名称就是id，
			如果输入 参数是简单类型，#{}中的参数名可以任意，
			可以使用value或其它名称
	
		resultType：指定sql输出结果 的所映射的java对象类型，
			select指定resultType表示将单条记录映射成的java对象。
	
	
	(2)<select id="findUserByName" parameterType="java.lang.String" resultType="cn.itcast.mybatis.po.User">
		SELECT * FROM USER WHERE username LIKE '%${value}%'
		</select>

		resultType：指定就是单条记录所映射的java对象 类型
		${}:表示拼接sql串，将接收到参数的内容不加任何修饰拼接在sql中。
			使用${}拼接sql，引起 sql注入
		${value}：接收输入 参数的内容，如果传入类型是简单类型，
			${}中只能使用value值

	(3)<delete id="deleteUser" parameterType="java.lang.Integer">
		delete from user where id=#{id}
		</delete>
		
		根据id删除用户，需要输入 id值

	(4)<update id="updateUser" parameterType="cn.itcast.mybatis.po.User">
		update user set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} 
		 where id=#{id}
		</update>
	
		需要传入用户的id
		需要传入用户的更新信息
		parameterType指定user对象，包括 id和更新信息，注意：id必须存在
		#{id}：从输入 user对象中获取id属性值


4.#{}和${}
	#{}表示一个占位符号，#{}接收输入参数，类型可以是简单类型，pojo、hashmap。
		如果接收简单类型，#{}中可以写成value或其它名称。
	#{}接收pojo对象值，通过OGNL读取对象中的属性值，通过属性.属性.属性...的方式获取对象属性值。

	${}表示一个拼接符号，会引用sql注入，所以不建议使用${}。
	${}接收输入参数，类型可以是简单类型，pojo、hashmap。
		如果接收简单类型，${}中只能写成value。
	${}接收pojo对象值，通过OGNL读取对象中的属性值，通过属性.属性.属性...的方式获取对象属性值。


5.Mybatis和Hibernate的区别:
	<1>Hibernate自动ORM框架,sql语句自动生成,修改难度大.
		应用场景:
				适用于变化需求不大的中小型项目,如:后台管理系统,erp,orm.oa等.

	<2>Mybatis半自动的ORM框架,sql可优化.
		应用场景:
				适用于变化较多的项目,如:互联网项目(京东,淘宝等电商)


6.SqlSession的创建过程:
	<1>通过SqlSessionFactoryBuilder创建会话工厂sqlSessionFactory
			将SqlSessionFactory当成一个工具类使用.不需要使用单例.
	<2>通过SqlSessionFactory创建SqlSession,使用单例模式管理SqlSessionFactory,只创建一个实例.
	<3>SqlSession:
		SqlSesion是面向用户(程序员)的接口.
			SqlSession提供了很多方法,如:selectOne(),selectList();
	*****SqlSession是线程不安全的,因为sqlSession实现类中除了接口(操作数据库)的方法,还有数据域属性.
		所以,SqlSession应该用在方法体内,定义成局部变量使用.


7.原始dao层的开发问题:
	<1>dao接口的实现方法中存在大量的耦合代码.开发代码重复,繁琐,不简便.
	<2>dao接口的实现类里面存在硬编码(statement 的id).不利于开发维护
	<3>dao接口实现类中调用sqlsession方法时候,传入的类型错误,编译时无法发现,只能到运行时才能发现,
		不利于程序员开发. 


8.Mybatis全局配置(mybatis_config.xml文件)开发规范:
	<1>xml文件中的namespace等于mapper文件的全限定类名.
	<2>mybatis全局配置文件中的方法名和mapper.xml中的statement的id一样.
	<3>mybatis全局配置文件中的方法输入参数类型和mapper.xml中的statement的parameterType指定的类型一致.
	<4>mybatis全局配置文件中的方法返回值类型和mapper.xml中的statement的resultType指定的类型一致.


9.Mybatis-config.xml文件
	<?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE configuration 
		PUBLIC "-//mybatis.org//DTD Config 3.0//EN" 
		"http://mybatis.org/dtd/mybatis-3-config.dtd" >

	<configuration>
		<properties resource="db.properties" />

		<settings>
			<setting name="logImpl" value="LOG4J" />
			<setting name="jdbcTypeForNull" value="NULL" />
			<setting name="cacheEnabled" value="true" />
		</settings>

		<typeAliases>
			<package name="com.tz.servlet.entity" />
		</typeAliases>

		<environments default="oracle_dev">
			<environment id="oracle_dev">
				<transactionManager type="JDBC"></transactionManager>
					<dataSource type="POOLED">
					<property name="driver" value="${ora_driver}" />
					<property name="url" value="${ora_url}" />
					<property name="username" value="${ora_user}" />
					<property name="password" value="${ora_pwd}" />

				</dataSource>
			</environment>
		</environments>

		<mappers>
			<package name="com.tz.servlet.mapper" />
		</mappers>
	</configuration>

	<1>properties属性:
		<properties resource="db.properties" />
		将数据库的连接信息写到properties文件中,有利于统一管理,方便其他xml文件利用,减少在xml文件中的硬编码.

			###################注意####################
			Mybatis加载属性的顺序:
				(1)在properties元素中定义的属性首先被读取;
				(2)然后会读取properties元素中的resource或者url加载的属性,它会覆盖已读取的同名属性;
				(3)最后读取parameterType传递的属性,他会覆盖已经读取的同名的属性.

			建议:不要在properties元素中添加任何属性值,只将属性值定义在properties属性文件中.
				在properties属性文件中,定义的练级的数据库的属性名要有特殊性,如:jdbc.url;jdbc.drive,jdbc.username和jdbc.password.

	<2>settings全局参数配置:
		<settings>
			<setting name="logImpl" value="LOG4J" />
			<setting name="jdbcTypeForNull" value="NULL" />
			<setting name="cacheEnabled" value="true" />
		</settings>
		需要的就设置,不需要的就不用设置,以免出现奇形怪状的问题.
		

	<3>typeAliases(别名) [重点]:
		<typeAliases>
			<package name="com.tz.servlet.entity" /><!-- 整个package的别名定义 -->
			<!-- <typeAliases type="com.yuri.mybatis.user" alias="user"/> --><!-- 单个别名定义 -->
		</typeAliases>
		别名的需求:
			在mapper.xml中定义了很多的statement,statement需要parameterType指定输入参数的类型,需要resultType指定的输出结果的映射类型.不使用别名,导致这些属性需要写很长的值(输入指定类型的全路径).
		
	<4>typeHandlers(类型处理器):
		Mybatis中通过typeHandlers完成jdbc的类型和java类型的转换.一般Mybatis提供的类型处理器已经满足需要.不需要自己定义


	<5>mapper(mapper的映射配置):
		<mappers>
			<!-- !-- 加载整个package的定义 -->
			<package name="com.yuri.mybatis.mapper" />

			<!-- 加载单个的xml的文件 -->
			<mapper resource="mapper/UserMapper.xml"/>

			<!-- 通过mappper接口加载映射文件:
				要遵循规范:将mapper接口的类名和mapper.xml映射文件保持一致,且在一个package中.
				这个规范的前提是使用的是mapper代理的方法-->
			<mapper class="com.yuri.mybatis.mapper.UserMapper"
		</mappers>

10.输入映射:
	通过parameterType指定输入参数的类型,类型可以是简单类型,hashmap,自定义的包装类型.

	<!-- User实体类 -->
	public class User{
		private Integer id;
		private String username;
		private String password;
		private String gender;
		private String level;

		/**getter和sette方法**/
	}



	<!-- 包装类型 -->
	public class UserQueryVo{
		//在这里包装所需要的条件
		
		//用户查询条件
		private UserCustom userCustom;

		//还可以包装其他的查询条件,如:订单,商品

		也要添加getter和setter方法
	}

	<!-- 用户的扩展类 -->
	public class UserCustom extends User{
		//可以扩展用户的信息


	}

	mapper.xml映射文件配置:
	<!-- 用户信息综合查询:
	#{userCustom.sex}:取出pojo包装对象中性别值
	${userCustom.username}:取出pojo包装对象中用户名称 -->
	<select id="findUserList" parameterType="com.yuri.mybatis.entity.UserQueryVo" resultType="com.yuri.mybatis.entity.UserCustom" >
		select * from user where user.gender=#{userCustom.gender} and user.username like '%${userCustom.username}%'
	</select>

	<!-- UserMapper.java 接口 -->
	public interface UserMapper{

		List<UserCustom> findUserList(UserQueryVo userQueryVo) throws Exception;

	}

11.输出映射:
	<1>resultType:
		(1)使用resultType进行输出映射,只有查询出来的列名和pojo中的属性名一致,该列才可以映射成功.
			如果不一致,则无法创建pojo对象,也就导致无法映射.
		(2)只要查询出来的列名和pojo中的属性有一个一致,也会创建pojo对象.

		输出简单类型:
			查询出来的结果集有且只有一行,可以使用简单类型进行输出映射.

	<2>resultMap:
		如果说查询出来的列名和pojo的属性名不一致,则需要定义一个resultMap对列名和pojo属性名之间做一种映射关系.

		(1)定义resultMap
		(2)使用resultMap作为statement的输出映射

		<!-- 1.先定义resultMap
			将select id id_, username username_ from user 得出的列 和User实体类中的属性做一个映射关系

			type: resultMap最终所映射的Java对象类型(可以使用别名)
			id:对resultMap的唯一标识
		 -->
		 <resultMap type="user" id="userResultMap">
		 	<!-- id表示查询结果集中唯一标识
				column:sql语句查询出来的列名
				property:type类型指定的pojo的属性名
				最终resultMap对column和property进行映射对应的关系
			 -->
		 	<id column="id_" property="id"/>
		 	<!-- result是对普通列名的映射的定义
		 		column:sql语句查询出来的列名
				property:type类型指定的pojo的属性名 -->
		 	<result column="username_" property="username"/>
		 	<result column="password_" property="password"/>
		 	<result column="gender_" property="gender"/>
		 	<result column="level_" property="level"/>
		 </resultMap>

		<!-- 2.使用resultMap进行输出映射 -->
		<!-- resultMap:指定定义的resultMap的id,如果这个resultMap在其他的mapper文件,前面则		需要加namespace
		-->
		<select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap">
			select id id_, username username_ from user where id=#{value}
		</select>

		<!-- 3.添加接口 -->
		public interface UserMapper{
			User findUserByIdResultMap(int id) throws Exception;
		}

12.动态sql:
		<1>对查询条件进行判断,如果输入参数不为空才能进行查询条件拼接.
		
		<select id="findUserList" parameterType="" resultType="">
			select * from yuri_user
			<!-- where 可以自动的去掉条件中的第一个and -->
			<where>
				<if test="userCustom!=NULL">
					<if test="user.gender!=NULL and user.gender!=''">
						user.gender = #{user.gender}
					</if>
					<if test="user.username!=NULL and user.username!=''">
						user.username like '%${user.username}%'
					</if>
				</if>
			</where>
		</select>


13.共享预定义的sql片段:
		将xml文件中的判断代码块抽取出来,组成一个sql片段.其他的statement就可以引用sql片段.

		<!-- 1.定义sql片段 -->

		<!-- 经验:(1)基于单标来定义sql片段,这样的sql片段可重用性才高.
		 		 (2)在片段中不要包括where-->
		<sql id="query_user_where">
			
				<if test="userCustom!=NULL">
					<if test="user.gender!=NULL and user.gender!=''">
						user.gender = #{user.gender}
					</if>
					<if test="user.username!=NULL and user.username!=''">
						user.username like '%${user.username}%'
					</if>
				</if>
			
		</sql>
			
		<!-- 2.使用sql片段 -->
		<select id="findUserList" parameterType="" resultType="">
			select * from yuri_user
			<where>
				<!-- (1)引用sql片段的id
					 (2)如果refid指定的id不在本mapper文件中,需要前面加上namespace -->
				<include refid="query_user_where"></include>
				<!-- 可以引用多个sql片段 -->
			</where>
		</select>


14.动态sql----foreach循环结构
		向sql传递数组或者list,mybatis使用foreach解析.
		在用户查询列表和查询总数的statement中增加多个id输入查询.

		需求:
			select * from user where id=1 or id=10 or id=16
			select * from user where id in(1,10,16)

		代码如下:
		<!-- User实体类 -->
		public class User{
			private Integer id;
			private String username;
			private String password;
			private String gender;
			private String level;

			/**getter和sette方法**/
		}

		<!-- 用户的扩展类 -->
		public class UserCustom extends User{
			//可以扩展用户的信息


		}

		<!-- 包装类型 -->
		public class UserQueryVo{
			//在这里包装所需要的条件
			
			//传入多个id
			private List<Integer> ids;

			//用户查询条件
			private UserCustom userCustom;

			//还可以包装其他的查询条件,如:订单,商品

			也要添加getter和setter方法
		}

		<!-- sql片段 -->
		<sql id="query_user_where">
				<if test="userCustom!=NULL">
					<if test="user.gender!=NULL and user.gender!=''">
						user.gender = #{user.gender}
					</if>
					<if test="user.username!=NULL and user.username!=''">
						user.username like '%${user.username}%'
					</if>
					<if test="ids!=NULL">
						<!-- 使用foreach遍历传入的ids
							(1)collection:指定对象的结婚属性名
							(2)item:每次遍历生成的对象
							(3)open:开始遍历时拼接的字符串
							(4)close:结束遍历时拼接的字符串
							(5)separator:遍历的两个对象之间需要拼接的字符串
						 -->
						 <!-- 我们要遍历的sql拼接
							and (id=1 or id=10 or id=16)
						  -->
						<foreach collection="ids" item="user_id" open="and (" close=")" separator="or">
							<!-- 每次遍历需要拼接的字符串 -->
							id = #{user_id}
						</foreach>

						<!-- 另外一种:
								and id in(1,10,16)
						 -->
						 <foreach collection="ids" items="user_id" open="and id in(" close=")" separator=",">
						 	#{user_id}
						 </foreach>
					</if>
				</if>
		</sql>



15.Mybatis前面的总结:
	<1>mybatis是持久层框架,mybatis是不完全的ORM框架. 

	<2>mybatis框架的执行流程:
		(1)配置mybatis配置文件,mybatis_config.xml文件(文件名称不固定)
		(2)通过配置文件,加载mybatis运行环境,创建SqlSessionFactory会话工厂
			SqlSessionFactory实际使用时,要按照单例方式管理.
		(3)通过工厂来创建SqlSession
			SqlSession是一个面向用户的接口(提供操作数据库方法),实现对象是线程不安全的,
			建议其应该用到方法体内.
		(4)调用sqlSession的方法操作数据库
		(5)释放资源,关闭SqlSession.

16.数据库模型分析思路:
		(1)每张表记录的数据内容:
			分模块对每张表记录的内容进行熟悉,相当于学习系统需求的(功能)的过程
		(2)每张表重要的字段设置:
			非空字段,外键字段
		(3)数据库级别表与表之间的关系
			外键关系
		(4)表和表之间的业务关系
			在分析表表之间的业务关系时一定要建立在摸个业务意义基础上分析

17.Mybatis高级映射:
		(1)外键所在的表就叫做子表,外键引用的表就是父表.画图的时候画子表指向父表.

		<1>需求:
				查询订单信息,关联查询创建订单的用户信息.

		<2>编写sql语句:
				确定查询的主表:订单表
				确定查询的关联表:用户表

				关联查询使用内连接还是外连接?
				由于orders表中有一个外键(user_id),通过外键关联查询用户表只能查询一条记录,
				建议使用内连接.

	select * from c_orders,c_user where c_orders.user_id = c_user.id;(结果又重复字段)

	改进:
		select 
			c_orders.*,
			c_user.username,
			c_user.gender,
			c_user.address
		from
			c_orders,
			c_user
		where
			c_orders.user_id = c_user.id;


18.使用resultMap关联查询一对一:
			
	

















	


	



#########################################################
11.ORM:Object Relationship Mapping(对象关系映射)
22.OGNL:Object-Graph Navigation Language(对象图导航语言)
33.Vo:Value Object(值对象)
